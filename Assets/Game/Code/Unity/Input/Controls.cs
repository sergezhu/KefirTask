//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Game/Data/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Code.Unity.Input
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""e6f8ef97-24f2-4aa2-a8b1-40a2923e4daf"",
            ""actions"": [
                {
                    ""name"": ""MoveStart"",
                    ""type"": ""Button"",
                    ""id"": ""48a73a28-ca13-4f4b-8fd9-e643c9c6caf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveEnd"",
                    ""type"": ""Button"",
                    ""id"": ""d38ac503-7bfd-458c-9519-08cbda03a00d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCWStart"",
                    ""type"": ""Button"",
                    ""id"": ""3db7e72f-7840-44dc-8eb6-b2422406ecaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCWEnd"",
                    ""type"": ""Button"",
                    ""id"": ""0b097a14-4919-4e8c-b35c-ab5437a64de6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCCWStart"",
                    ""type"": ""Button"",
                    ""id"": ""3cd68d49-e5c5-4683-8493-a51320d89922"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCCWEnd"",
                    ""type"": ""Button"",
                    ""id"": ""e14cd9e4-6ce6-46c8-8f8e-3124050712d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b15cf9f0-8339-4a99-8624-9f5cc00836b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b8ed8d-5100-491c-b2c9-4556afa895d5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCWStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b431cca1-8ef6-4545-ba8f-86037e405b58"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCCWStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d4c026d-3a1b-446c-9312-758cf84ffb40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac5c4d56-263d-4d8d-aa67-829d9347535f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCWEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99074529-ac22-48f2-a9b8-9f56e04c5284"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCCWEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""f1828586-28fe-4d32-96e3-9387d087bfa1"",
            ""actions"": [
                {
                    ""name"": ""Fire1"",
                    ""type"": ""Button"",
                    ""id"": ""263dae66-78a0-41d8-9cbe-ee28677864dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire2"",
                    ""type"": ""Button"",
                    ""id"": ""cadf2854-6daf-46ab-860e-2dc5105b14dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b738b522-5d26-4dc5-880d-57c6c0f1f063"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67e88c6e-4a9c-497f-b0f2-4acecc565af9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_MoveStart = m_Keyboard.FindAction("MoveStart", throwIfNotFound: true);
            m_Keyboard_MoveEnd = m_Keyboard.FindAction("MoveEnd", throwIfNotFound: true);
            m_Keyboard_RotateCWStart = m_Keyboard.FindAction("RotateCWStart", throwIfNotFound: true);
            m_Keyboard_RotateCWEnd = m_Keyboard.FindAction("RotateCWEnd", throwIfNotFound: true);
            m_Keyboard_RotateCCWStart = m_Keyboard.FindAction("RotateCCWStart", throwIfNotFound: true);
            m_Keyboard_RotateCCWEnd = m_Keyboard.FindAction("RotateCCWEnd", throwIfNotFound: true);
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_Fire1 = m_Mouse.FindAction("Fire1", throwIfNotFound: true);
            m_Mouse_Fire2 = m_Mouse.FindAction("Fire2", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private IKeyboardActions m_KeyboardActionsCallbackInterface;
        private readonly InputAction m_Keyboard_MoveStart;
        private readonly InputAction m_Keyboard_MoveEnd;
        private readonly InputAction m_Keyboard_RotateCWStart;
        private readonly InputAction m_Keyboard_RotateCWEnd;
        private readonly InputAction m_Keyboard_RotateCCWStart;
        private readonly InputAction m_Keyboard_RotateCCWEnd;
        public struct KeyboardActions
        {
            private @Controls m_Wrapper;
            public KeyboardActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveStart => m_Wrapper.m_Keyboard_MoveStart;
            public InputAction @MoveEnd => m_Wrapper.m_Keyboard_MoveEnd;
            public InputAction @RotateCWStart => m_Wrapper.m_Keyboard_RotateCWStart;
            public InputAction @RotateCWEnd => m_Wrapper.m_Keyboard_RotateCWEnd;
            public InputAction @RotateCCWStart => m_Wrapper.m_Keyboard_RotateCCWStart;
            public InputAction @RotateCCWEnd => m_Wrapper.m_Keyboard_RotateCCWEnd;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
                {
                    @MoveStart.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveStart;
                    @MoveStart.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveStart;
                    @MoveStart.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveStart;
                    @MoveEnd.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveEnd;
                    @MoveEnd.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveEnd;
                    @MoveEnd.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveEnd;
                    @RotateCWStart.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWStart;
                    @RotateCWStart.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWStart;
                    @RotateCWStart.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWStart;
                    @RotateCWEnd.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWEnd;
                    @RotateCWEnd.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWEnd;
                    @RotateCWEnd.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCWEnd;
                    @RotateCCWStart.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWStart;
                    @RotateCCWStart.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWStart;
                    @RotateCCWStart.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWStart;
                    @RotateCCWEnd.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWEnd;
                    @RotateCCWEnd.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWEnd;
                    @RotateCCWEnd.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCWEnd;
                }
                m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveStart.started += instance.OnMoveStart;
                    @MoveStart.performed += instance.OnMoveStart;
                    @MoveStart.canceled += instance.OnMoveStart;
                    @MoveEnd.started += instance.OnMoveEnd;
                    @MoveEnd.performed += instance.OnMoveEnd;
                    @MoveEnd.canceled += instance.OnMoveEnd;
                    @RotateCWStart.started += instance.OnRotateCWStart;
                    @RotateCWStart.performed += instance.OnRotateCWStart;
                    @RotateCWStart.canceled += instance.OnRotateCWStart;
                    @RotateCWEnd.started += instance.OnRotateCWEnd;
                    @RotateCWEnd.performed += instance.OnRotateCWEnd;
                    @RotateCWEnd.canceled += instance.OnRotateCWEnd;
                    @RotateCCWStart.started += instance.OnRotateCCWStart;
                    @RotateCCWStart.performed += instance.OnRotateCCWStart;
                    @RotateCCWStart.canceled += instance.OnRotateCCWStart;
                    @RotateCCWEnd.started += instance.OnRotateCCWEnd;
                    @RotateCCWEnd.performed += instance.OnRotateCCWEnd;
                    @RotateCCWEnd.canceled += instance.OnRotateCCWEnd;
                }
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);

        // Mouse
        private readonly InputActionMap m_Mouse;
        private IMouseActions m_MouseActionsCallbackInterface;
        private readonly InputAction m_Mouse_Fire1;
        private readonly InputAction m_Mouse_Fire2;
        public struct MouseActions
        {
            private @Controls m_Wrapper;
            public MouseActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Fire1 => m_Wrapper.m_Mouse_Fire1;
            public InputAction @Fire2 => m_Wrapper.m_Mouse_Fire2;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterface != null)
                {
                    @Fire1.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire1;
                    @Fire1.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire1;
                    @Fire1.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire1;
                    @Fire2.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire2;
                    @Fire2.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire2;
                    @Fire2.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnFire2;
                }
                m_Wrapper.m_MouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Fire1.started += instance.OnFire1;
                    @Fire1.performed += instance.OnFire1;
                    @Fire1.canceled += instance.OnFire1;
                    @Fire2.started += instance.OnFire2;
                    @Fire2.performed += instance.OnFire2;
                    @Fire2.canceled += instance.OnFire2;
                }
            }
        }
        public MouseActions @Mouse => new MouseActions(this);
        public interface IKeyboardActions
        {
            void OnMoveStart(InputAction.CallbackContext context);
            void OnMoveEnd(InputAction.CallbackContext context);
            void OnRotateCWStart(InputAction.CallbackContext context);
            void OnRotateCWEnd(InputAction.CallbackContext context);
            void OnRotateCCWStart(InputAction.CallbackContext context);
            void OnRotateCCWEnd(InputAction.CallbackContext context);
        }
        public interface IMouseActions
        {
            void OnFire1(InputAction.CallbackContext context);
            void OnFire2(InputAction.CallbackContext context);
        }
    }
}

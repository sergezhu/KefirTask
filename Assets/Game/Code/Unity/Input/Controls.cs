//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Game/Code/Data/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Code.Unity.Input
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""e6f8ef97-24f2-4aa2-a8b1-40a2923e4daf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""48a73a28-ca13-4f4b-8fd9-e643c9c6caf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCW"",
                    ""type"": ""Button"",
                    ""id"": ""3db7e72f-7840-44dc-8eb6-b2422406ecaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCCW"",
                    ""type"": ""Button"",
                    ""id"": ""3cd68d49-e5c5-4683-8493-a51320d89922"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b15cf9f0-8339-4a99-8624-9f5cc00836b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b8ed8d-5100-491c-b2c9-4556afa895d5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b431cca1-8ef6-4545-ba8f-86037e405b58"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCCW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_Move = m_Keyboard.FindAction("Move", throwIfNotFound: true);
            m_Keyboard_RotateCW = m_Keyboard.FindAction("RotateCW", throwIfNotFound: true);
            m_Keyboard_RotateCCW = m_Keyboard.FindAction("RotateCCW", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private IKeyboardActions m_KeyboardActionsCallbackInterface;
        private readonly InputAction m_Keyboard_Move;
        private readonly InputAction m_Keyboard_RotateCW;
        private readonly InputAction m_Keyboard_RotateCCW;
        public struct KeyboardActions
        {
            private @Controls m_Wrapper;
            public KeyboardActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Keyboard_Move;
            public InputAction @RotateCW => m_Wrapper.m_Keyboard_RotateCW;
            public InputAction @RotateCCW => m_Wrapper.m_Keyboard_RotateCCW;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @RotateCW.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCW;
                    @RotateCW.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCW;
                    @RotateCW.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCW;
                    @RotateCCW.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCW;
                    @RotateCCW.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCW;
                    @RotateCCW.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRotateCCW;
                }
                m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @RotateCW.started += instance.OnRotateCW;
                    @RotateCW.performed += instance.OnRotateCW;
                    @RotateCW.canceled += instance.OnRotateCW;
                    @RotateCCW.started += instance.OnRotateCCW;
                    @RotateCCW.performed += instance.OnRotateCCW;
                    @RotateCCW.canceled += instance.OnRotateCCW;
                }
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);
        public interface IKeyboardActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnRotateCW(InputAction.CallbackContext context);
            void OnRotateCCW(InputAction.CallbackContext context);
        }
    }
}
